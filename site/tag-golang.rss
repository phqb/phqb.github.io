<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>phqb</title><link></link><description></description><pubDate>Sun, 26 May 2024 00:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Jul 2025 05:06:36 GMT</lastBuildDate><generator>marmite</generator><item><title>Decorate a generated method in Go</title><link>/decorate-a-generated-method-in-go.html</link><category>golang</category><guid>/decorate-a-generated-method-in-go.html</guid><pubDate>Sun, 26 May 2024 00:00:00 GMT</pubDate><source url="">tag-golang</source><content:encoded><![CDATA[<p>I'm using <code>github.com/tinylib/msgp</code> to add marshal/unmarshal code to my structs. Some of my structs have pointer alias. So I have to ignore the alias via <code>msg:&quot;-&quot;</code> and assign it to its source after unmarshaling.</p>
<p>But assigning aliases after each unmarshal call is repetitive and prone to errors. After hours of frustration, I devised a simple and so obvious trick to eliminate assigning alias at unmarshaling call site: renaming the struct and embedding it in a wrapper whose name is the struct's original name, then override and decorate its unmarshal method.</p>
<p>For an example, my struct:</p>
<pre><code>type MyStruct struct {
    name       string
    age        uint64
    ref        *Foo
    anotherRef *Foo `msg:&quot;-&quot;`
}

// generated method
func (z *MyStruct) UnmarshalMsg(b []byte) error {}
</code></pre>
<p>becomes</p>
<pre><code>type MyStruct struct {
    myStructInner
}

// &quot;decorated&quot; method
func (z *MyStruct) UnmarshalMsg(b []byte) error {
    if err := z.myStructInner.UnmarshalMsg(b); err != nil {
        return err
    }
    z.anotherRef = z.ref // assigning pointer alias
    return nil
}

type myStructInner struct {
    name       string
    age        uint64
    ref        *Foo
    anotherRef *Foo `msg:&quot;-&quot;`
}

// generated method
func (z *myStructInner) UnmarshalMsg(b []byte) error {}
</code></pre>
<p>The trick is so obvious that I wish I had came up with it sooner.</p>
]]></content:encoded></item></channel></rss>